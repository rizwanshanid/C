07.04 9:06 PM
8
Aim-8
Create a doubly linked list of integers and display in forward and backward direction.
Algorithm
1. Start
2. Globally declare a struct node with variables int data and struct node *perv and struct node
 *next
3. Declare pointer head and last.
4. Declare variables int n,data choice.
5. Initialize head and last node as NULL
6. Print multiple options and with index number while choice is not zero.
7. Read choice
8. Start switch statement
 Case 1 :call createList().
 Case 2 :call reverseList().
 Case 3 :call displayList().
 Case 0 :Exit
Procedure:-
createList()
1. Read total number of nodes to create
2. Call function create list
3. Initialize i and data as integers along with struct node and pointer newnode
4. If n is greater or equal than one goto step 13
5. Allocate size of struct node for head
6. Read data of one node
7. Head points to data
8. Set head pointer of next and previous as null
9. Assign value of last as head
10. Repeat step 18 to for i less than n and from 2.
11. Allocate size of struct node for newnode
12. Read data
13. Set pointer of newNode to data for value data and pointer to previous as last
14. Set newNode pointer to next as NULL and last pointer points to next
15. Set last an newNode
16. Print Doubly Linked list is created
[end of loop].
17. Stop
reverseList()
1. Initialize structure node with pointer current and temp
2. Set current as head
3. While current is not NULL
4. Set temp as pointer of current points to next
5. Set pointer next of current as pointer of prev
6. Assign value of temp to current
[end of loop]
7. Set temp as head
8. Set head as last And last as temp
9. Return list reversed sucessfully
10. Stop
displayList()
1. Initialize a struct node as pointer temp
2. Initialize n =1 as integer
3. If head == null go to step 29 else 30
4. Print List is empty
5. Set temp as head and return Data in list
6. While temp is not null
7. Print data of n node = pointer of data
8. Increment n by 1
9. Temp points to next
[End of loop]
10. Stop
Source code
#include <stdio.h>
#include <stdlib.h>
struct node {
int data;
struct node * prev;
struct node * next;
}*head, *last;
void createList(int n);
void displayList();
void reverseList();
void main()
{
int n, data, choice=1;
head = NULL;
last = NULL;
while(choice != 0)
{
printf("============================================\n");
printf("DOUBLY LINKED LIST PROGRAM\n");
printf("============================================\n");
printf("1. Create List\n");
printf("2. Reverse List\n");
printf("3. Display list\n");
printf("0. Exit\n");
printf("--------------------------------------------\n");
printf("Enter your choice : ");
 scanf("%d", &choice);
 switch(choice)
{
case 1:
printf("Enter the total number of nodes in list: ");
scanf("%d", &n);
createList(n);
break;
case 2:
reverseList();
break;
case 3:
displayList();
break;
case 0:
break;
default:
printf("Error! Invalid choice. Please choose between 0-3");
}
 printf("\n\n\n\n\n");
}
}
void createList(int n)
{
int i, data;
struct node *newNode;
if(n >= 1)
{
head = (struct node *)malloc(sizeof(struct node));
 printf("Enter data of 1 node: ");
scanf("%d", &data);
 head->data = data;
head->prev = NULL;
head->next = NULL;
 last = head;
 for(i=2; i<=n; i++)
{
newNode = (struct node *)malloc(sizeof(struct node));
printf("Enter data of %d node: ", i);
scanf("%d", &data);
newNode->data = data;
newNode->prev = last;
newNode->next = NULL;
last->next = newNode;
last = newNode;
}
 printf("\nDOUBLY LINKED LIST CREATED SUCCESSFULLY\n");
}
}
void displayList()
{
struct node * temp;
int n = 1;
if(head == NULL)
{
printf("List is empty.\n");
}
else
{
temp = head;
printf("DATA IN THE LIST:\n");
 while(temp != NULL)
{
printf("DATA of %d node = %d\n", n, temp->data);
n++;
temp = temp->next;
}
}
}
void reverseList()
{
struct node *current, *temp;
current = head;
while(current != NULL)
{
temp = current->next;
current->next = current->prev;
current->prev = temp;
current = temp;
}
temp = head;
head = last;
last = temp;
printf("LIST REVERSED SUCCESSFULLY.\n");
}
Output
============================================
DOUBLY LINKED LIST PROGRAM
============================================
1. Create List
2. Reverse List
3. Display list
0. Exit
-------------------------------------------------------------------------------
Enter your choice: 1
Enter the total number of nodes in list: 3
Enter data of 1 node: 23
Enter data of 2 node: 12
Enter data of 3 node: 45
DOUBLY LINKED LIST CREATED SUCCESSFULLY.
============================================
DOUBLY LINKED LIST PROGRAM
============================================
1. Create List
2. Reverse List
3. Display list
0. Exit
-------------------------------------------------------------------------------
Enter your choice: 3
DATA IN THE LIST:
DATA of 1 node: 23
DATA of 2 node: 12
DATA of 3 node: 45
============================================
DOUBLY LINKED LIST PROGRAM
============================================
1. Create List
2. Reverse List
3. Display list
0. Exit
-------------------------------------------------------------------------------
Enter your choice: 2
LIST REVERSED SUCCESSFULLY.
============================================
DOUBLY LINKED LIST PROGRAM
============================================
1. Create List
2. Reverse List
3. Display list
0. Exit
-------------------------------------------------------------------------------
Enter your choice: 3
DATA IN THE LIST:
DATA of 1 node: 45
DATA of 2 node: 12
DATA of 3 node: 23
============================================
DOUBLY LINKED LIST PROGRAM
============================================
1. Create List
2. Reverse List
3. Display list
0. Exit
-------------------------------------------------------------------------------
Enter your choice: 0


