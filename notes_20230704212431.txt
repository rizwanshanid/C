07.04 9:15 PM
15
Aim-15
Search an element in a binary search tree.
Algorithm
1. Start
2. Globally declare structure node with data,left and right.
3. Print menu 1. Insertion, 2. Search, 3. Display, 4. Exit
4. Read choice
5. If choice=1, then call insertion()
6. If choice=2, then call search()
7. If choice=3, then call display()
8. If choice=4, Exit.
Procedure:-
insertion(NODE *ptr,int item)
1. if (ptr==NULL), then do steps 2,3 & 4
2. Allocate memory for ptr.
3. Set ptr->left=ptr->right=NULL;
4. Set ptr->data=item;
5. else if(item<ptr->data), then do step 6.
6. ptr->left=insertion(ptr->left,item);
7. else
 ptr->right=insertion(ptr->right,item);
8. return ptr;
search(NODE* ptr, int item)
1. if(ptr==NULL)
 Print "Item not found"
2. else if(item==ptr->data)
 Print "Item Found"
 Set f=1;
3. else if(item < ptr->data), then call search(ptr->left,item)
4. else if(item > ptr->data),then call search(ptr->right,item)
5. return.
display(NODE *ptr)
1. if(ptr!=NULL)
2. Call display(ptr->left)
3. Print ptr->data
4. Call display(ptr->right)
Source code
#include<stdio.h>
#include<stdlib.h>
struct node
{
int data;
struct node *left;
struct node *right;
};
int f=0;
typedef struct node NODE;
NODE *root;
NODE *insertion(NODE *ptr,int item)
{
if (ptr==NULL)
{
ptr=(NODE*)malloc(sizeof(NODE));
ptr->left=ptr->right=NULL;
ptr->data=item;
}
else if(item<ptr->data)
ptr->left=insertion(ptr->left,item);
else
ptr->right=insertion(ptr->right,item);
return ptr;
}
void display(NODE *ptr)
{
if(ptr!=NULL)
{
display(ptr->left);
printf("%d\t",ptr->data);
display(ptr->right);
}
}
void search(NODE* ptr, int item)
{
if(ptr==NULL)
{
printf("Item not found\n");
return;
}
else if(item==ptr->data)
{
printf("\nItem Found\n");
f=1;
}
else if(item < ptr->data)
search(ptr->left,item);
else if(item > ptr->data)
search(ptr->right,item);
}
void main()
{
int ch1,ch2,num;
root=NULL;
do
{
printf("\n1.Insertion");
printf("\n2.Search");
printf("\n3.Display");
printf("\n4.Exit");
printf("\nEnter your choice:");
scanf("%d",&ch1);
switch(ch1)
{
case 1: printf("Enter item:\n");
scanf("%d",&num);
root=insertion(root,num);
break;
case 2: if(root==NULL)
{
printf("Empty tree!");
break;
}
else
{
printf("Enter the value:");
scanf("%d",&num);
search(root,num);
}
break;
case 3: if(root==NULL)
{
printf("\nEmpty tree");
break;
}
else
display(root);
break;
case 4:exit(0);
default:printf("Invalid choice");
break;
}
}while(ch1!=4);
}
Output
1.Insertion
2.Search
3.Display
4.Exit
Enter your choice:1
Enter item:
86
1.Insertion
2.Search
3.Display
4.Exit
Enter your choice:1
Enter item:
17
1.Insertion
2.Search
3.Display
4.Exit
Enter your choice:2
Enter the value:9
Item not found

